/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




#include <string>


#include <stdint.h>		// Use the C99 official header


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <typeinfo>
#include <stdexcept>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>


#include "cryptography/hash.hpp"
#include "interfaces/common_objects/signature.hpp"

SWIGINTERN std::vector< unsigned char >::const_reference std_vector_Sl_uint8_t_Sg__get(std::vector< uint8_t > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__set(std::vector< uint8_t > *self,int i,std::vector< unsigned char >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< shared_model::crypto::Hash >::const_reference std_vector_Sl_shared_model_crypto_Hash_Sg__get(std::vector< shared_model::crypto::Hash > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_shared_model_crypto_Hash_Sg__set(std::vector< shared_model::crypto::Hash > *self,int i,std::vector< shared_model::crypto::Hash >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< int >::const_reference std_vector_Sl_int_Sg__get(std::vector< int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector< int > *self,int i,std::vector< int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< shared_model::interface::Signature const * >::const_reference std_vector_Sl_shared_model_interface_Signature_SS_const_Sm__Sg__get(std::vector< shared_model::interface::Signature const * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_shared_model_interface_Signature_SS_const_Sm__Sg__set(std::vector< shared_model::interface::Signature const * > *self,int i,std::vector< shared_model::interface::Signature const * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#include "bindings/model_transaction_builder.hpp"
#include "bindings/model_query_builder.hpp"
#include "bindings/model_blocks_query_builder.hpp"
#include "bindings/model_crypto.hpp"
#include "bindings/model_proto.hpp"
#include "builders/protobuf/unsigned_proto.hpp"
#include "bindings/client_api.hpp"

SWIGINTERN std::vector< shared_model::interface::Signature const * > shared_model_proto_Transaction_signs(shared_model::proto::Transaction *self){
    std::vector<const shared_model::interface::Signature*> sigs;

    for (const auto &s : self->signatures()) {
      sigs.push_back(&s);
    }
    return sigs;
  }
SWIGINTERN std::vector< shared_model::interface::Signature const * > shared_model_proto_Query_signs(shared_model::proto::Query *self){
    std::vector<const shared_model::interface::Signature*> sigs;

    for (const auto &s : self->signatures()) {
      sigs.push_back(&s);
    }
    return sigs;
  }
SWIGINTERN std::vector< shared_model::interface::Signature const * > shared_model_proto_BlocksQuery_signs(shared_model::proto::BlocksQuery *self){
    std::vector<const shared_model::interface::Signature*> sigs;

    for (const auto &s : self->signatures()) {
      sigs.push_back(&s);
    }
    return sigs;
  }
SWIGINTERN shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *new_shared_model_interface_PermissionSet_Sl_shared_model_interface_permissions_Role_Sg___SWIG_2(std::vector< int > const &perms){
    shared_model::interface::PermissionSet<shared_model::interface::permissions::Role> *set = new shared_model::interface::PermissionSet<shared_model::interface::permissions::Role>;
    for (auto p: perms) {
      set->set(static_cast<shared_model::interface::permissions::Role>(p));
    }
    return set;
  }
SWIGINTERN shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *new_shared_model_interface_PermissionSet_Sl_shared_model_interface_permissions_Grantable_Sg___SWIG_2(std::vector< int > const &perms){
    shared_model::interface::PermissionSet<shared_model::interface::permissions::Grantable> *set = new shared_model::interface::PermissionSet<shared_model::interface::permissions::Grantable>;
    for (auto p: perms) {
      set->set(static_cast<shared_model::interface::permissions::Grantable>(p));
    }
    return set;
  }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1ByteVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< uint8_t > *)new std::vector< uint8_t >();
  *(std::vector< uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1ByteVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< unsigned char >::size_type arg1 ;
  std::vector< uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< unsigned char >::size_type)jarg1; 
  result = (std::vector< uint8_t > *)new std::vector< uint8_t >(arg1);
  *(std::vector< uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ByteVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  result = ((std::vector< uint8_t > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ByteVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  result = ((std::vector< uint8_t > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ByteVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = (std::vector< unsigned char >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ByteVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  result = (bool)((std::vector< uint8_t > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ByteVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ByteVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char >::value_type *arg2 = 0 ;
  std::vector< unsigned char >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  temp2 = (std::vector< unsigned char >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< unsigned char >::value_type const &)*arg2);
}


SWIGEXPORT jshort JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ByteVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jshort jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned char >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned char >::value_type *) &std_vector_Sl_uint8_t_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jshort)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ByteVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned char >::value_type *arg3 = 0 ;
  std::vector< unsigned char >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< unsigned char >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_uint8_t_Sg__set(arg1,arg2,(unsigned char const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_delete_1ByteVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1StringVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1StringVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::string >::size_type)jarg1; 
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_StringVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_StringVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_StringVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_StringVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_StringVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_StringVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_StringVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_StringVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_delete_1StringVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1HashVector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< shared_model::crypto::Hash > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< shared_model::crypto::Hash > *)new std::vector< shared_model::crypto::Hash >();
  *(std::vector< shared_model::crypto::Hash > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_HashVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< shared_model::crypto::Hash > *arg1 = (std::vector< shared_model::crypto::Hash > *) 0 ;
  std::vector< shared_model::crypto::Hash >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< shared_model::crypto::Hash > **)&jarg1; 
  result = ((std::vector< shared_model::crypto::Hash > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_HashVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< shared_model::crypto::Hash > *arg1 = (std::vector< shared_model::crypto::Hash > *) 0 ;
  std::vector< shared_model::crypto::Hash >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< shared_model::crypto::Hash > **)&jarg1; 
  result = ((std::vector< shared_model::crypto::Hash > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_HashVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< shared_model::crypto::Hash > *arg1 = (std::vector< shared_model::crypto::Hash > *) 0 ;
  std::vector< shared_model::crypto::Hash >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< shared_model::crypto::Hash > **)&jarg1; 
  arg2 = (std::vector< shared_model::crypto::Hash >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_HashVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< shared_model::crypto::Hash > *arg1 = (std::vector< shared_model::crypto::Hash > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< shared_model::crypto::Hash > **)&jarg1; 
  result = (bool)((std::vector< shared_model::crypto::Hash > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_HashVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< shared_model::crypto::Hash > *arg1 = (std::vector< shared_model::crypto::Hash > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< shared_model::crypto::Hash > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_HashVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< shared_model::crypto::Hash > *arg1 = (std::vector< shared_model::crypto::Hash > *) 0 ;
  std::vector< shared_model::crypto::Hash >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< shared_model::crypto::Hash > **)&jarg1; 
  arg2 = *(std::vector< shared_model::crypto::Hash >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< shared_model::crypto::Hash >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< shared_model::crypto::Hash >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_HashVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< shared_model::crypto::Hash > *arg1 = (std::vector< shared_model::crypto::Hash > *) 0 ;
  int arg2 ;
  std::vector< shared_model::crypto::Hash >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< shared_model::crypto::Hash > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< shared_model::crypto::Hash >::value_type *) &std_vector_Sl_shared_model_crypto_Hash_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< shared_model::crypto::Hash >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_HashVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< shared_model::crypto::Hash > *arg1 = (std::vector< shared_model::crypto::Hash > *) 0 ;
  int arg2 ;
  std::vector< shared_model::crypto::Hash >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< shared_model::crypto::Hash > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< shared_model::crypto::Hash >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< shared_model::crypto::Hash >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_shared_model_crypto_Hash_Sg__set(arg1,arg2,(shared_model::crypto::Hash const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_delete_1HashVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< shared_model::crypto::Hash > *arg1 = (std::vector< shared_model::crypto::Hash > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< shared_model::crypto::Hash > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1IntVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< int > *)new std::vector< int >();
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1IntVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< int >::size_type arg1 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< int >::size_type)jarg1; 
  result = (std::vector< int > *)new std::vector< int >(arg1);
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_IntVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = ((std::vector< int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_IntVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = ((std::vector< int > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_IntVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_IntVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = (bool)((std::vector< int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_IntVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_IntVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  std::vector< int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  temp2 = (std::vector< int >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_IntVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_IntVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__set(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_delete_1IntVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< int > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1SignatureVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< shared_model::interface::Signature const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< shared_model::interface::Signature const * > *)new std::vector< shared_model::interface::Signature const * >();
  *(std::vector< shared_model::interface::Signature const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1SignatureVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< shared_model::interface::Signature const * >::size_type arg1 ;
  std::vector< shared_model::interface::Signature const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< shared_model::interface::Signature const * >::size_type)jarg1; 
  result = (std::vector< shared_model::interface::Signature const * > *)new std::vector< shared_model::interface::Signature const * >(arg1);
  *(std::vector< shared_model::interface::Signature const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_SignatureVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< shared_model::interface::Signature const * > *arg1 = (std::vector< shared_model::interface::Signature const * > *) 0 ;
  std::vector< shared_model::interface::Signature const * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< shared_model::interface::Signature const * > **)&jarg1; 
  result = ((std::vector< shared_model::interface::Signature const * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_SignatureVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< shared_model::interface::Signature const * > *arg1 = (std::vector< shared_model::interface::Signature const * > *) 0 ;
  std::vector< shared_model::interface::Signature const * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< shared_model::interface::Signature const * > **)&jarg1; 
  result = ((std::vector< shared_model::interface::Signature const * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_SignatureVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< shared_model::interface::Signature const * > *arg1 = (std::vector< shared_model::interface::Signature const * > *) 0 ;
  std::vector< shared_model::interface::Signature const * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< shared_model::interface::Signature const * > **)&jarg1; 
  arg2 = (std::vector< shared_model::interface::Signature const * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_SignatureVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< shared_model::interface::Signature const * > *arg1 = (std::vector< shared_model::interface::Signature const * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< shared_model::interface::Signature const * > **)&jarg1; 
  result = (bool)((std::vector< shared_model::interface::Signature const * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_SignatureVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< shared_model::interface::Signature const * > *arg1 = (std::vector< shared_model::interface::Signature const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< shared_model::interface::Signature const * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_SignatureVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< shared_model::interface::Signature const * > *arg1 = (std::vector< shared_model::interface::Signature const * > *) 0 ;
  std::vector< shared_model::interface::Signature const * >::value_type *arg2 = 0 ;
  std::vector< shared_model::interface::Signature const * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< shared_model::interface::Signature const * > **)&jarg1; 
  temp2 = *(std::vector< shared_model::interface::Signature const * >::value_type *)&jarg2;
  arg2 = (std::vector< shared_model::interface::Signature const * >::value_type *)&temp2; 
  (arg1)->push_back((std::vector< shared_model::interface::Signature const * >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_SignatureVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< shared_model::interface::Signature const * > *arg1 = (std::vector< shared_model::interface::Signature const * > *) 0 ;
  int arg2 ;
  std::vector< shared_model::interface::Signature const * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< shared_model::interface::Signature const * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< shared_model::interface::Signature const * >::value_type *) &std_vector_Sl_shared_model_interface_Signature_SS_const_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< shared_model::interface::Signature const * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_SignatureVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< shared_model::interface::Signature const * > *arg1 = (std::vector< shared_model::interface::Signature const * > *) 0 ;
  int arg2 ;
  std::vector< shared_model::interface::Signature const * >::value_type *arg3 = 0 ;
  std::vector< shared_model::interface::Signature const * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< shared_model::interface::Signature const * > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(std::vector< shared_model::interface::Signature const * >::value_type *)&jarg3;
  arg3 = (std::vector< shared_model::interface::Signature const * >::value_type *)&temp3; 
  try {
    std_vector_Sl_shared_model_interface_Signature_SS_const_Sm__Sg__set(arg1,arg2,(shared_model::interface::Signature const *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_delete_1SignatureVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< shared_model::interface::Signature const * > *arg1 = (std::vector< shared_model::interface::Signature const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< shared_model::interface::Signature const * > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_toBinaryString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  shared_model::crypto::Blob *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::crypto::Blob **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::crypto::Blob const & reference is null");
    return 0;
  } 
  {
    try {
      result = shared_model::crypto::toBinaryString((shared_model::crypto::Blob const &)*arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1Blob_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  shared_model::crypto::Blob *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (shared_model::crypto::Blob *)new shared_model::crypto::Blob();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::crypto::Blob **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1Blob_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  shared_model::crypto::Blob *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (shared_model::crypto::Blob *)new shared_model::crypto::Blob((std::string const &)*arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::crypto::Blob **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1Blob_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::crypto::Blob::Bytes *arg1 = 0 ;
  shared_model::crypto::Blob *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::crypto::Blob::Bytes **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::crypto::Blob::Bytes const & reference is null");
    return 0;
  } 
  {
    try {
      result = (shared_model::crypto::Blob *)new shared_model::crypto::Blob((shared_model::crypto::Blob::Bytes const &)*arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::crypto::Blob **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Blob_1fromHexString(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  shared_model::crypto::Blob result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = shared_model::crypto::Blob::fromHexString((std::string const &)*arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::crypto::Blob **)&jresult = new shared_model::crypto::Blob((const shared_model::crypto::Blob &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Blob_1blob(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::crypto::Blob *arg1 = (shared_model::crypto::Blob *) 0 ;
  shared_model::crypto::Blob::Bytes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::crypto::Blob **)&jarg1; 
  {
    try {
      result = (shared_model::crypto::Blob::Bytes *) &((shared_model::crypto::Blob const *)arg1)->blob();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::crypto::Blob::Bytes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Blob_1hex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  shared_model::crypto::Blob *arg1 = (shared_model::crypto::Blob *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::crypto::Blob **)&jarg1; 
  {
    try {
      result = (std::string *) &((shared_model::crypto::Blob const *)arg1)->hex();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Blob_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::crypto::Blob *arg1 = (shared_model::crypto::Blob *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::crypto::Blob **)&jarg1; 
  {
    try {
      result = ((shared_model::crypto::Blob const *)arg1)->size();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Blob_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  shared_model::crypto::Blob *arg1 = (shared_model::crypto::Blob *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::crypto::Blob **)&jarg1; 
  {
    try {
      result = ((shared_model::crypto::Blob const *)arg1)->toString();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Blob_1b_1equal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  shared_model::crypto::Blob *arg1 = (shared_model::crypto::Blob *) 0 ;
  shared_model::crypto::Blob *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(shared_model::crypto::Blob **)&jarg1; 
  arg2 = *(shared_model::crypto::Blob **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::crypto::Blob const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((shared_model::crypto::Blob const *)arg1)->operator ==((shared_model::crypto::Blob const &)*arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_delete_1Blob(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shared_model::crypto::Blob *arg1 = (shared_model::crypto::Blob *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shared_model::crypto::Blob **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_BatchType_1ATOMIC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  shared_model::interface::types::BatchType result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (shared_model::interface::types::BatchType)shared_model::interface::types::BatchType::ATOMIC;
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_BatchType_1ORDERED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  shared_model::interface::types::BatchType result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (shared_model::interface::types::BatchType)shared_model::interface::types::BatchType::ORDERED;
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Signature_1publicKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::interface::Signature *arg1 = (shared_model::interface::Signature *) 0 ;
  shared_model::interface::Signature::PublicKeyType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::interface::Signature **)&jarg1; 
  {
    try {
      result = (shared_model::interface::Signature::PublicKeyType *) &((shared_model::interface::Signature const *)arg1)->publicKey();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::interface::Signature::PublicKeyType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Signature_1signedData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::interface::Signature *arg1 = (shared_model::interface::Signature *) 0 ;
  shared_model::interface::Signature::SignedType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::interface::Signature **)&jarg1; 
  {
    try {
      result = (shared_model::interface::Signature::SignedType *) &((shared_model::interface::Signature const *)arg1)->signedData();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::interface::Signature::SignedType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Signature_1equal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  shared_model::interface::Signature *arg1 = (shared_model::interface::Signature *) 0 ;
  shared_model::interface::Signature *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(shared_model::interface::Signature **)&jarg1; 
  arg2 = *(shared_model::interface::Signature **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::interface::Signature const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((shared_model::interface::Signature const *)arg1)->operator ==((shared_model::interface::Signature const &)*arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Signature_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  shared_model::interface::Signature *arg1 = (shared_model::interface::Signature *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::interface::Signature **)&jarg1; 
  {
    try {
      result = ((shared_model::interface::Signature const *)arg1)->toString();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_delete_1Signature(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shared_model::interface::Signature *arg1 = (shared_model::interface::Signature *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shared_model::interface::Signature **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_permissionFor(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  shared_model::interface::permissions::Grantable arg1 ;
  shared_model::interface::permissions::Role result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (shared_model::interface::permissions::Grantable)jarg1; 
  {
    try {
      result = (shared_model::interface::permissions::Role)shared_model::interface::permissions::permissionFor(arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_isValid_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  shared_model::interface::permissions::Role arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (shared_model::interface::permissions::Role)jarg1; 
  {
    try {
      result = (bool)shared_model::interface::permissions::isValid(arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_isValid_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  shared_model::interface::permissions::Grantable arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (shared_model::interface::permissions::Grantable)jarg1; 
  {
    try {
      result = (bool)shared_model::interface::permissions::isValid(arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1PublicKey_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  shared_model::crypto::PublicKey *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (shared_model::crypto::PublicKey *)new shared_model::crypto::PublicKey((std::string const &)*arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::crypto::PublicKey **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1PublicKey_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::crypto::Blob *arg1 = 0 ;
  shared_model::crypto::PublicKey *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::crypto::Blob **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::crypto::Blob const & reference is null");
    return 0;
  } 
  {
    try {
      result = (shared_model::crypto::PublicKey *)new shared_model::crypto::PublicKey((shared_model::crypto::Blob const &)*arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::crypto::PublicKey **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_PublicKey_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  shared_model::crypto::PublicKey *arg1 = (shared_model::crypto::PublicKey *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::crypto::PublicKey **)&jarg1; 
  {
    try {
      result = ((shared_model::crypto::PublicKey const *)arg1)->toString();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_delete_1PublicKey(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shared_model::crypto::PublicKey *arg1 = (shared_model::crypto::PublicKey *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shared_model::crypto::PublicKey **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1PrivateKey_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  shared_model::crypto::PrivateKey *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (shared_model::crypto::PrivateKey *)new shared_model::crypto::PrivateKey((std::string const &)*arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::crypto::PrivateKey **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1PrivateKey_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::crypto::Blob *arg1 = 0 ;
  shared_model::crypto::PrivateKey *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::crypto::Blob **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::crypto::Blob const & reference is null");
    return 0;
  } 
  {
    try {
      result = (shared_model::crypto::PrivateKey *)new shared_model::crypto::PrivateKey((shared_model::crypto::Blob const &)*arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::crypto::PrivateKey **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_PrivateKey_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  shared_model::crypto::PrivateKey *arg1 = (shared_model::crypto::PrivateKey *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::crypto::PrivateKey **)&jarg1; 
  {
    try {
      result = ((shared_model::crypto::PrivateKey const *)arg1)->toString();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_delete_1PrivateKey(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shared_model::crypto::PrivateKey *arg1 = (shared_model::crypto::PrivateKey *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shared_model::crypto::PrivateKey **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Hash_1Hasher_1hash_1invoke(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  shared_model::crypto::Hash::Hasher *arg1 = (shared_model::crypto::Hash::Hasher *) 0 ;
  shared_model::crypto::Hash *arg2 = 0 ;
  std::size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(shared_model::crypto::Hash::Hasher **)&jarg1; 
  arg2 = *(shared_model::crypto::Hash **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::crypto::Hash const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((shared_model::crypto::Hash::Hasher const *)arg1)->operator ()((shared_model::crypto::Hash const &)*arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1Hash_1Hasher(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  shared_model::crypto::Hash::Hasher *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (shared_model::crypto::Hash::Hasher *)new shared_model::crypto::Hash::Hasher();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::crypto::Hash::Hasher **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_delete_1Hash_1Hasher(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shared_model::crypto::Hash::Hasher *arg1 = (shared_model::crypto::Hash::Hasher *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shared_model::crypto::Hash::Hasher **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1Hash_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  shared_model::crypto::Hash *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (shared_model::crypto::Hash *)new shared_model::crypto::Hash();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::crypto::Hash **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1Hash_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  shared_model::crypto::Hash *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (shared_model::crypto::Hash *)new shared_model::crypto::Hash((std::string const &)*arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::crypto::Hash **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1Hash_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::crypto::Blob *arg1 = 0 ;
  shared_model::crypto::Hash *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::crypto::Blob **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::crypto::Blob const & reference is null");
    return 0;
  } 
  {
    try {
      result = (shared_model::crypto::Hash *)new shared_model::crypto::Hash((shared_model::crypto::Blob const &)*arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::crypto::Hash **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Hash_1fromHexString(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  shared_model::crypto::Hash result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = shared_model::crypto::Hash::fromHexString((std::string const &)*arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::crypto::Hash **)&jresult = new shared_model::crypto::Hash((const shared_model::crypto::Hash &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Hash_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  shared_model::crypto::Hash *arg1 = (shared_model::crypto::Hash *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::crypto::Hash **)&jarg1; 
  {
    try {
      result = ((shared_model::crypto::Hash const *)arg1)->toString();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_delete_1Hash(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shared_model::crypto::Hash *arg1 = (shared_model::crypto::Hash *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shared_model::crypto::Hash **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1Keypair(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  shared_model::crypto::Keypair::PublicKeyType *arg1 = 0 ;
  shared_model::crypto::Keypair::PrivateKeyType *arg2 = 0 ;
  shared_model::crypto::Keypair *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(shared_model::crypto::Keypair::PublicKeyType **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::crypto::Keypair::PublicKeyType const & reference is null");
    return 0;
  } 
  arg2 = *(shared_model::crypto::Keypair::PrivateKeyType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::crypto::Keypair::PrivateKeyType const & reference is null");
    return 0;
  } 
  {
    try {
      result = (shared_model::crypto::Keypair *)new shared_model::crypto::Keypair((shared_model::crypto::Keypair::PublicKeyType const &)*arg1,(shared_model::crypto::Keypair::PrivateKeyType const &)*arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::crypto::Keypair **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Keypair_1publicKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::crypto::Keypair *arg1 = (shared_model::crypto::Keypair *) 0 ;
  shared_model::crypto::Keypair::PublicKeyType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::crypto::Keypair **)&jarg1; 
  {
    try {
      result = (shared_model::crypto::Keypair::PublicKeyType *) &((shared_model::crypto::Keypair const *)arg1)->publicKey();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::crypto::Keypair::PublicKeyType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Keypair_1privateKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::crypto::Keypair *arg1 = (shared_model::crypto::Keypair *) 0 ;
  shared_model::crypto::Keypair::PrivateKeyType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::crypto::Keypair **)&jarg1; 
  {
    try {
      result = (shared_model::crypto::Keypair::PrivateKeyType *) &((shared_model::crypto::Keypair const *)arg1)->privateKey();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::crypto::Keypair::PrivateKeyType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Keypair_1kp_1equal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  shared_model::crypto::Keypair *arg1 = (shared_model::crypto::Keypair *) 0 ;
  shared_model::crypto::Keypair *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(shared_model::crypto::Keypair **)&jarg1; 
  arg2 = *(shared_model::crypto::Keypair **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::crypto::Keypair const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((shared_model::crypto::Keypair const *)arg1)->operator ==((shared_model::crypto::Keypair const &)*arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Keypair_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  shared_model::crypto::Keypair *arg1 = (shared_model::crypto::Keypair *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::crypto::Keypair **)&jarg1; 
  {
    try {
      result = ((shared_model::crypto::Keypair const *)arg1)->toString();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_delete_1Keypair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shared_model::crypto::Keypair *arg1 = (shared_model::crypto::Keypair *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shared_model::crypto::Keypair **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1Signed_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  shared_model::crypto::Signed *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (shared_model::crypto::Signed *)new shared_model::crypto::Signed((std::string const &)*arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::crypto::Signed **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1Signed_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::crypto::Blob::Bytes *arg1 = 0 ;
  shared_model::crypto::Signed *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::crypto::Blob::Bytes **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::crypto::Blob::Bytes const & reference is null");
    return 0;
  } 
  {
    try {
      result = (shared_model::crypto::Signed *)new shared_model::crypto::Signed((shared_model::crypto::Blob::Bytes const &)*arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::crypto::Signed **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1Signed_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::crypto::Blob *arg1 = 0 ;
  shared_model::crypto::Signed *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::crypto::Blob **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::crypto::Blob const & reference is null");
    return 0;
  } 
  {
    try {
      result = (shared_model::crypto::Signed *)new shared_model::crypto::Signed((shared_model::crypto::Blob const &)*arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::crypto::Signed **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Signed_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  shared_model::crypto::Signed *arg1 = (shared_model::crypto::Signed *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::crypto::Signed **)&jarg1; 
  {
    try {
      result = ((shared_model::crypto::Signed const *)arg1)->toString();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_delete_1Signed(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shared_model::crypto::Signed *arg1 = (shared_model::crypto::Signed *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shared_model::crypto::Signed **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1Transaction_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shared_model::proto::Transaction::TransportType *arg1 = 0 ;
  shared_model::proto::Transaction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shared_model::proto::Transaction::TransportType **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::proto::Transaction::TransportType const & reference is null");
    return 0;
  } 
  {
    try {
      result = (shared_model::proto::Transaction *)new shared_model::proto::Transaction((shared_model::proto::Transaction::TransportType const &)*arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::proto::Transaction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1Transaction_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::proto::Transaction *arg1 = 0 ;
  shared_model::proto::Transaction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::Transaction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::proto::Transaction const & reference is null");
    return 0;
  } 
  {
    try {
      result = (shared_model::proto::Transaction *)new shared_model::proto::Transaction((shared_model::proto::Transaction const &)*arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::proto::Transaction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_delete_1Transaction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shared_model::proto::Transaction *arg1 = (shared_model::proto::Transaction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shared_model::proto::Transaction **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Transaction_1creatorAccountId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  shared_model::proto::Transaction *arg1 = (shared_model::proto::Transaction *) 0 ;
  shared_model::interface::types::AccountIdType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::Transaction **)&jarg1; 
  {
    try {
      result = (shared_model::interface::types::AccountIdType *) &((shared_model::proto::Transaction const *)arg1)->creatorAccountId();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Transaction_1blob(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::proto::Transaction *arg1 = (shared_model::proto::Transaction *) 0 ;
  shared_model::interface::types::BlobType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::Transaction **)&jarg1; 
  {
    try {
      result = (shared_model::interface::types::BlobType *) &((shared_model::proto::Transaction const *)arg1)->blob();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::interface::types::BlobType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Transaction_1payload(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::proto::Transaction *arg1 = (shared_model::proto::Transaction *) 0 ;
  shared_model::interface::types::BlobType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::Transaction **)&jarg1; 
  {
    try {
      result = (shared_model::interface::types::BlobType *) &((shared_model::proto::Transaction const *)arg1)->payload();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::interface::types::BlobType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Transaction_1reducedPayload(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::proto::Transaction *arg1 = (shared_model::proto::Transaction *) 0 ;
  shared_model::interface::types::BlobType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::Transaction **)&jarg1; 
  {
    try {
      result = (shared_model::interface::types::BlobType *) &((shared_model::proto::Transaction const *)arg1)->reducedPayload();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::interface::types::BlobType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Transaction_1reducedHash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::proto::Transaction *arg1 = (shared_model::proto::Transaction *) 0 ;
  shared_model::interface::types::HashType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::Transaction **)&jarg1; 
  {
    try {
      result = (shared_model::interface::types::HashType *) &((shared_model::proto::Transaction const *)arg1)->reducedHash();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::interface::types::HashType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Transaction_1addSignature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  shared_model::proto::Transaction *arg1 = (shared_model::proto::Transaction *) 0 ;
  shared_model::crypto::Signed *arg2 = 0 ;
  shared_model::crypto::PublicKey *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(shared_model::proto::Transaction **)&jarg1; 
  arg2 = *(shared_model::crypto::Signed **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::crypto::Signed const & reference is null");
    return 0;
  } 
  arg3 = *(shared_model::crypto::PublicKey **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::crypto::PublicKey const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->addSignature((shared_model::crypto::Signed const &)*arg2,(shared_model::crypto::PublicKey const &)*arg3);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Transaction_1getTransport(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::proto::Transaction *arg1 = (shared_model::proto::Transaction *) 0 ;
  shared_model::proto::Transaction::TransportType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::Transaction **)&jarg1; 
  {
    try {
      result = (shared_model::proto::Transaction::TransportType *) &((shared_model::proto::Transaction const *)arg1)->getTransport();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::proto::Transaction::TransportType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Transaction_1createdTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  shared_model::proto::Transaction *arg1 = (shared_model::proto::Transaction *) 0 ;
  shared_model::interface::types::TimestampType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::Transaction **)&jarg1; 
  {
    try {
      result = (shared_model::interface::types::TimestampType)((shared_model::proto::Transaction const *)arg1)->createdTime();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Transaction_1quorum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  shared_model::proto::Transaction *arg1 = (shared_model::proto::Transaction *) 0 ;
  shared_model::interface::types::QuorumType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::Transaction **)&jarg1; 
  {
    try {
      result = (shared_model::interface::types::QuorumType)((shared_model::proto::Transaction const *)arg1)->quorum();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Transaction_1batchMeta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::proto::Transaction *arg1 = (shared_model::proto::Transaction *) 0 ;
  boost::optional< std::shared_ptr< shared_model::interface::BatchMeta > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::Transaction **)&jarg1; 
  {
    try {
      result = ((shared_model::proto::Transaction const *)arg1)->batchMeta();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(boost::optional< std::shared_ptr< shared_model::interface::BatchMeta > > **)&jresult = new boost::optional< std::shared_ptr< shared_model::interface::BatchMeta > >((const boost::optional< std::shared_ptr< shared_model::interface::BatchMeta > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Transaction_1signs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::proto::Transaction *arg1 = (shared_model::proto::Transaction *) 0 ;
  std::vector< shared_model::interface::Signature const * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::Transaction **)&jarg1; 
  {
    try {
      result = shared_model_proto_Transaction_signs(arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< shared_model::interface::Signature const * > **)&jresult = new std::vector< shared_model::interface::Signature const * >((const std::vector< shared_model::interface::Signature const * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1Query_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::proto::Query *arg1 = 0 ;
  shared_model::proto::Query *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::Query **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::proto::Query const & reference is null");
    return 0;
  } 
  {
    try {
      result = (shared_model::proto::Query *)new shared_model::proto::Query((shared_model::proto::Query const &)*arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::proto::Query **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1Query_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  shared_model::proto::Query::TransportType *arg1 = 0 ;
  shared_model::proto::Query *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shared_model::proto::Query::TransportType **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::proto::Query::TransportType const & reference is null");
    return 0;
  } 
  {
    try {
      result = (shared_model::proto::Query *)new shared_model::proto::Query((shared_model::proto::Query::TransportType const &)*arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::proto::Query **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_delete_1Query(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shared_model::proto::Query *arg1 = (shared_model::proto::Query *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shared_model::proto::Query **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Query_1creatorAccountId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  shared_model::proto::Query *arg1 = (shared_model::proto::Query *) 0 ;
  shared_model::interface::types::AccountIdType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::Query **)&jarg1; 
  {
    try {
      result = (shared_model::interface::types::AccountIdType *) &((shared_model::proto::Query const *)arg1)->creatorAccountId();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Query_1queryCounter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  shared_model::proto::Query *arg1 = (shared_model::proto::Query *) 0 ;
  shared_model::interface::types::CounterType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::Query **)&jarg1; 
  {
    try {
      result = (shared_model::interface::types::CounterType)((shared_model::proto::Query const *)arg1)->queryCounter();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Query_1blob(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::proto::Query *arg1 = (shared_model::proto::Query *) 0 ;
  shared_model::interface::types::BlobType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::Query **)&jarg1; 
  {
    try {
      result = (shared_model::interface::types::BlobType *) &((shared_model::proto::Query const *)arg1)->blob();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::interface::types::BlobType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Query_1payload(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::proto::Query *arg1 = (shared_model::proto::Query *) 0 ;
  shared_model::interface::types::BlobType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::Query **)&jarg1; 
  {
    try {
      result = (shared_model::interface::types::BlobType *) &((shared_model::proto::Query const *)arg1)->payload();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::interface::types::BlobType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Query_1addSignature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  shared_model::proto::Query *arg1 = (shared_model::proto::Query *) 0 ;
  shared_model::crypto::Signed *arg2 = 0 ;
  shared_model::crypto::PublicKey *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(shared_model::proto::Query **)&jarg1; 
  arg2 = *(shared_model::crypto::Signed **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::crypto::Signed const & reference is null");
    return 0;
  } 
  arg3 = *(shared_model::crypto::PublicKey **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::crypto::PublicKey const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->addSignature((shared_model::crypto::Signed const &)*arg2,(shared_model::crypto::PublicKey const &)*arg3);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Query_1createdTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  shared_model::proto::Query *arg1 = (shared_model::proto::Query *) 0 ;
  shared_model::interface::types::TimestampType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::Query **)&jarg1; 
  {
    try {
      result = (shared_model::interface::types::TimestampType)((shared_model::proto::Query const *)arg1)->createdTime();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Query_1getTransport(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::proto::Query *arg1 = (shared_model::proto::Query *) 0 ;
  shared_model::proto::Query::TransportType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::Query **)&jarg1; 
  {
    try {
      result = (shared_model::proto::Query::TransportType *) &((shared_model::proto::Query const *)arg1)->getTransport();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::proto::Query::TransportType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Query_1signs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::proto::Query *arg1 = (shared_model::proto::Query *) 0 ;
  std::vector< shared_model::interface::Signature const * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::Query **)&jarg1; 
  {
    try {
      result = shared_model_proto_Query_signs(arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< shared_model::interface::Signature const * > **)&jresult = new std::vector< shared_model::interface::Signature const * >((const std::vector< shared_model::interface::Signature const * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1BlocksQuery_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::proto::BlocksQuery *arg1 = 0 ;
  shared_model::proto::BlocksQuery *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::BlocksQuery **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::proto::BlocksQuery const & reference is null");
    return 0;
  } 
  {
    try {
      result = (shared_model::proto::BlocksQuery *)new shared_model::proto::BlocksQuery((shared_model::proto::BlocksQuery const &)*arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::proto::BlocksQuery **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_BlocksQuery_1creatorAccountId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  shared_model::proto::BlocksQuery *arg1 = (shared_model::proto::BlocksQuery *) 0 ;
  shared_model::interface::types::AccountIdType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::BlocksQuery **)&jarg1; 
  {
    try {
      result = (shared_model::interface::types::AccountIdType *) &((shared_model::proto::BlocksQuery const *)arg1)->creatorAccountId();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_BlocksQuery_1queryCounter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  shared_model::proto::BlocksQuery *arg1 = (shared_model::proto::BlocksQuery *) 0 ;
  shared_model::interface::types::CounterType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::BlocksQuery **)&jarg1; 
  {
    try {
      result = (shared_model::interface::types::CounterType)((shared_model::proto::BlocksQuery const *)arg1)->queryCounter();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_BlocksQuery_1blob(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::proto::BlocksQuery *arg1 = (shared_model::proto::BlocksQuery *) 0 ;
  shared_model::interface::types::BlobType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::BlocksQuery **)&jarg1; 
  {
    try {
      result = (shared_model::interface::types::BlobType *) &((shared_model::proto::BlocksQuery const *)arg1)->blob();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::interface::types::BlobType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_BlocksQuery_1payload(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::proto::BlocksQuery *arg1 = (shared_model::proto::BlocksQuery *) 0 ;
  shared_model::interface::types::BlobType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::BlocksQuery **)&jarg1; 
  {
    try {
      result = (shared_model::interface::types::BlobType *) &((shared_model::proto::BlocksQuery const *)arg1)->payload();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::interface::types::BlobType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_BlocksQuery_1addSignature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  shared_model::proto::BlocksQuery *arg1 = (shared_model::proto::BlocksQuery *) 0 ;
  shared_model::crypto::Signed *arg2 = 0 ;
  shared_model::crypto::PublicKey *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(shared_model::proto::BlocksQuery **)&jarg1; 
  arg2 = *(shared_model::crypto::Signed **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::crypto::Signed const & reference is null");
    return 0;
  } 
  arg3 = *(shared_model::crypto::PublicKey **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::crypto::PublicKey const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->addSignature((shared_model::crypto::Signed const &)*arg2,(shared_model::crypto::PublicKey const &)*arg3);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_BlocksQuery_1createdTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  shared_model::proto::BlocksQuery *arg1 = (shared_model::proto::BlocksQuery *) 0 ;
  shared_model::interface::types::TimestampType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::BlocksQuery **)&jarg1; 
  {
    try {
      result = (shared_model::interface::types::TimestampType)((shared_model::proto::BlocksQuery const *)arg1)->createdTime();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_BlocksQuery_1signs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::proto::BlocksQuery *arg1 = (shared_model::proto::BlocksQuery *) 0 ;
  std::vector< shared_model::interface::Signature const * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::BlocksQuery **)&jarg1; 
  {
    try {
      result = shared_model_proto_BlocksQuery_signs(arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< shared_model::interface::Signature const * > **)&jresult = new std::vector< shared_model::interface::Signature const * >((const std::vector< shared_model::interface::Signature const * > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_delete_1BlocksQuery(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shared_model::proto::BlocksQuery *arg1 = (shared_model::proto::BlocksQuery *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shared_model::proto::BlocksQuery **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1ModelTransactionBuilder(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelTransactionBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (shared_model::bindings::ModelTransactionBuilder *)new shared_model::bindings::ModelTransactionBuilder();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelTransactionBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelTransactionBuilder_1creatorAccountId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelTransactionBuilder *arg1 = (shared_model::bindings::ModelTransactionBuilder *) 0 ;
  shared_model::interface::types::AccountIdType *arg2 = 0 ;
  shared_model::bindings::ModelTransactionBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelTransactionBuilder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  shared_model::interface::types::AccountIdType arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (arg1)->creatorAccountId((shared_model::interface::types::AccountIdType const &)*arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelTransactionBuilder **)&jresult = new shared_model::bindings::ModelTransactionBuilder((const shared_model::bindings::ModelTransactionBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelTransactionBuilder_1createdTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelTransactionBuilder *arg1 = (shared_model::bindings::ModelTransactionBuilder *) 0 ;
  shared_model::interface::types::TimestampType arg2 ;
  shared_model::bindings::ModelTransactionBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelTransactionBuilder **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (shared_model::interface::types::TimestampType)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (shared_model::interface::types::TimestampType)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    try {
      result = (arg1)->createdTime(arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelTransactionBuilder **)&jresult = new shared_model::bindings::ModelTransactionBuilder((const shared_model::bindings::ModelTransactionBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelTransactionBuilder_1quorum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelTransactionBuilder *arg1 = (shared_model::bindings::ModelTransactionBuilder *) 0 ;
  shared_model::interface::types::QuorumType arg2 ;
  shared_model::bindings::ModelTransactionBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelTransactionBuilder **)&jarg1; 
  arg2 = (shared_model::interface::types::QuorumType)jarg2; 
  {
    try {
      result = (arg1)->quorum(arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelTransactionBuilder **)&jresult = new shared_model::bindings::ModelTransactionBuilder((const shared_model::bindings::ModelTransactionBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelTransactionBuilder_1batchMeta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelTransactionBuilder *arg1 = (shared_model::bindings::ModelTransactionBuilder *) 0 ;
  shared_model::interface::types::BatchType arg2 ;
  std::vector< shared_model::interface::types::HashType > *arg3 = 0 ;
  shared_model::bindings::ModelTransactionBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(shared_model::bindings::ModelTransactionBuilder **)&jarg1; 
  arg2 = (shared_model::interface::types::BatchType)jarg2; 
  arg3 = *(std::vector< shared_model::interface::types::HashType > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< shared_model::interface::types::HashType > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->batchMeta(arg2,(std::vector< shared_model::interface::types::HashType > const &)*arg3);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelTransactionBuilder **)&jresult = new shared_model::bindings::ModelTransactionBuilder((const shared_model::bindings::ModelTransactionBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelTransactionBuilder_1addAssetQuantity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelTransactionBuilder *arg1 = (shared_model::bindings::ModelTransactionBuilder *) 0 ;
  shared_model::interface::types::AssetIdType *arg2 = 0 ;
  std::string *arg3 = 0 ;
  shared_model::bindings::ModelTransactionBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelTransactionBuilder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  shared_model::interface::types::AssetIdType arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (arg1)->addAssetQuantity((shared_model::interface::types::AssetIdType const &)*arg2,(std::string const &)*arg3);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelTransactionBuilder **)&jresult = new shared_model::bindings::ModelTransactionBuilder((const shared_model::bindings::ModelTransactionBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelTransactionBuilder_1addPeer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelTransactionBuilder *arg1 = (shared_model::bindings::ModelTransactionBuilder *) 0 ;
  shared_model::interface::types::AddressType *arg2 = 0 ;
  shared_model::crypto::PublicKey *arg3 = 0 ;
  shared_model::bindings::ModelTransactionBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(shared_model::bindings::ModelTransactionBuilder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  shared_model::interface::types::AddressType arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(shared_model::crypto::PublicKey **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::crypto::PublicKey const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->addPeer((shared_model::interface::types::AddressType const &)*arg2,(shared_model::crypto::PublicKey const &)*arg3);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelTransactionBuilder **)&jresult = new shared_model::bindings::ModelTransactionBuilder((const shared_model::bindings::ModelTransactionBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelTransactionBuilder_1addSignatory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelTransactionBuilder *arg1 = (shared_model::bindings::ModelTransactionBuilder *) 0 ;
  shared_model::interface::types::AddressType *arg2 = 0 ;
  shared_model::crypto::PublicKey *arg3 = 0 ;
  shared_model::bindings::ModelTransactionBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(shared_model::bindings::ModelTransactionBuilder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  shared_model::interface::types::AddressType arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(shared_model::crypto::PublicKey **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::crypto::PublicKey const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->addSignatory((shared_model::interface::types::AddressType const &)*arg2,(shared_model::crypto::PublicKey const &)*arg3);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelTransactionBuilder **)&jresult = new shared_model::bindings::ModelTransactionBuilder((const shared_model::bindings::ModelTransactionBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelTransactionBuilder_1removeSignatory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelTransactionBuilder *arg1 = (shared_model::bindings::ModelTransactionBuilder *) 0 ;
  shared_model::interface::types::AddressType *arg2 = 0 ;
  shared_model::crypto::PublicKey *arg3 = 0 ;
  shared_model::bindings::ModelTransactionBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(shared_model::bindings::ModelTransactionBuilder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  shared_model::interface::types::AddressType arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(shared_model::crypto::PublicKey **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::crypto::PublicKey const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->removeSignatory((shared_model::interface::types::AddressType const &)*arg2,(shared_model::crypto::PublicKey const &)*arg3);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelTransactionBuilder **)&jresult = new shared_model::bindings::ModelTransactionBuilder((const shared_model::bindings::ModelTransactionBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelTransactionBuilder_1appendRole(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelTransactionBuilder *arg1 = (shared_model::bindings::ModelTransactionBuilder *) 0 ;
  shared_model::interface::types::AccountIdType *arg2 = 0 ;
  shared_model::interface::types::RoleIdType *arg3 = 0 ;
  shared_model::bindings::ModelTransactionBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelTransactionBuilder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  shared_model::interface::types::AccountIdType arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  shared_model::interface::types::RoleIdType arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (arg1)->appendRole((shared_model::interface::types::AccountIdType const &)*arg2,(shared_model::interface::types::RoleIdType const &)*arg3);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelTransactionBuilder **)&jresult = new shared_model::bindings::ModelTransactionBuilder((const shared_model::bindings::ModelTransactionBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelTransactionBuilder_1createAsset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jshort jarg4) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelTransactionBuilder *arg1 = (shared_model::bindings::ModelTransactionBuilder *) 0 ;
  shared_model::interface::types::AssetNameType *arg2 = 0 ;
  shared_model::interface::types::DomainIdType *arg3 = 0 ;
  shared_model::interface::types::PrecisionType arg4 ;
  shared_model::bindings::ModelTransactionBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelTransactionBuilder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  shared_model::interface::types::AssetNameType arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  shared_model::interface::types::DomainIdType arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (shared_model::interface::types::PrecisionType)jarg4; 
  {
    try {
      result = (arg1)->createAsset((shared_model::interface::types::AssetNameType const &)*arg2,(shared_model::interface::types::DomainIdType const &)*arg3,arg4);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelTransactionBuilder **)&jresult = new shared_model::bindings::ModelTransactionBuilder((const shared_model::bindings::ModelTransactionBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelTransactionBuilder_1createAccount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelTransactionBuilder *arg1 = (shared_model::bindings::ModelTransactionBuilder *) 0 ;
  shared_model::interface::types::AccountNameType *arg2 = 0 ;
  shared_model::interface::types::AddressType *arg3 = 0 ;
  shared_model::crypto::PublicKey *arg4 = 0 ;
  shared_model::bindings::ModelTransactionBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(shared_model::bindings::ModelTransactionBuilder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  shared_model::interface::types::AccountNameType arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  shared_model::interface::types::AddressType arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(shared_model::crypto::PublicKey **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::crypto::PublicKey const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->createAccount((shared_model::interface::types::AccountNameType const &)*arg2,(shared_model::interface::types::AddressType const &)*arg3,(shared_model::crypto::PublicKey const &)*arg4);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelTransactionBuilder **)&jresult = new shared_model::bindings::ModelTransactionBuilder((const shared_model::bindings::ModelTransactionBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelTransactionBuilder_1createDomain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelTransactionBuilder *arg1 = (shared_model::bindings::ModelTransactionBuilder *) 0 ;
  shared_model::interface::types::AddressType *arg2 = 0 ;
  shared_model::interface::types::RoleIdType *arg3 = 0 ;
  shared_model::bindings::ModelTransactionBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelTransactionBuilder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  shared_model::interface::types::AddressType arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  shared_model::interface::types::RoleIdType arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (arg1)->createDomain((shared_model::interface::types::AddressType const &)*arg2,(shared_model::interface::types::RoleIdType const &)*arg3);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelTransactionBuilder **)&jresult = new shared_model::bindings::ModelTransactionBuilder((const shared_model::bindings::ModelTransactionBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelTransactionBuilder_1createRole(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelTransactionBuilder *arg1 = (shared_model::bindings::ModelTransactionBuilder *) 0 ;
  shared_model::interface::types::RoleIdType *arg2 = 0 ;
  shared_model::interface::RolePermissionSet *arg3 = 0 ;
  shared_model::bindings::ModelTransactionBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(shared_model::bindings::ModelTransactionBuilder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  shared_model::interface::types::RoleIdType arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(shared_model::interface::RolePermissionSet **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::interface::RolePermissionSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->createRole((shared_model::interface::types::RoleIdType const &)*arg2,(shared_model::interface::RolePermissionSet const &)*arg3);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelTransactionBuilder **)&jresult = new shared_model::bindings::ModelTransactionBuilder((const shared_model::bindings::ModelTransactionBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelTransactionBuilder_1detachRole(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelTransactionBuilder *arg1 = (shared_model::bindings::ModelTransactionBuilder *) 0 ;
  shared_model::interface::types::AccountIdType *arg2 = 0 ;
  shared_model::interface::types::RoleIdType *arg3 = 0 ;
  shared_model::bindings::ModelTransactionBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelTransactionBuilder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  shared_model::interface::types::AccountIdType arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  shared_model::interface::types::RoleIdType arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (arg1)->detachRole((shared_model::interface::types::AccountIdType const &)*arg2,(shared_model::interface::types::RoleIdType const &)*arg3);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelTransactionBuilder **)&jresult = new shared_model::bindings::ModelTransactionBuilder((const shared_model::bindings::ModelTransactionBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelTransactionBuilder_1grantPermission(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelTransactionBuilder *arg1 = (shared_model::bindings::ModelTransactionBuilder *) 0 ;
  shared_model::interface::types::AccountIdType *arg2 = 0 ;
  shared_model::interface::permissions::Grantable arg3 ;
  shared_model::bindings::ModelTransactionBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelTransactionBuilder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  shared_model::interface::types::AccountIdType arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (shared_model::interface::permissions::Grantable)jarg3; 
  {
    try {
      result = (arg1)->grantPermission((shared_model::interface::types::AccountIdType const &)*arg2,arg3);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelTransactionBuilder **)&jresult = new shared_model::bindings::ModelTransactionBuilder((const shared_model::bindings::ModelTransactionBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelTransactionBuilder_1revokePermission(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelTransactionBuilder *arg1 = (shared_model::bindings::ModelTransactionBuilder *) 0 ;
  shared_model::interface::types::AccountIdType *arg2 = 0 ;
  shared_model::interface::permissions::Grantable arg3 ;
  shared_model::bindings::ModelTransactionBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelTransactionBuilder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  shared_model::interface::types::AccountIdType arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (shared_model::interface::permissions::Grantable)jarg3; 
  {
    try {
      result = (arg1)->revokePermission((shared_model::interface::types::AccountIdType const &)*arg2,arg3);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelTransactionBuilder **)&jresult = new shared_model::bindings::ModelTransactionBuilder((const shared_model::bindings::ModelTransactionBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelTransactionBuilder_1setAccountDetail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelTransactionBuilder *arg1 = (shared_model::bindings::ModelTransactionBuilder *) 0 ;
  shared_model::interface::types::AccountIdType *arg2 = 0 ;
  shared_model::interface::types::AccountDetailKeyType *arg3 = 0 ;
  shared_model::interface::types::AccountDetailValueType *arg4 = 0 ;
  shared_model::bindings::ModelTransactionBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelTransactionBuilder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  shared_model::interface::types::AccountIdType arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  shared_model::interface::types::AccountDetailKeyType arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  shared_model::interface::types::AccountDetailValueType arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      result = (arg1)->setAccountDetail((shared_model::interface::types::AccountIdType const &)*arg2,(shared_model::interface::types::AccountDetailKeyType const &)*arg3,(shared_model::interface::types::AccountDetailValueType const &)*arg4);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelTransactionBuilder **)&jresult = new shared_model::bindings::ModelTransactionBuilder((const shared_model::bindings::ModelTransactionBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelTransactionBuilder_1setAccountQuorum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelTransactionBuilder *arg1 = (shared_model::bindings::ModelTransactionBuilder *) 0 ;
  shared_model::interface::types::AddressType *arg2 = 0 ;
  shared_model::interface::types::QuorumType arg3 ;
  shared_model::bindings::ModelTransactionBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelTransactionBuilder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  shared_model::interface::types::AddressType arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (shared_model::interface::types::QuorumType)jarg3; 
  {
    try {
      result = (arg1)->setAccountQuorum((shared_model::interface::types::AddressType const &)*arg2,arg3);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelTransactionBuilder **)&jresult = new shared_model::bindings::ModelTransactionBuilder((const shared_model::bindings::ModelTransactionBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelTransactionBuilder_1subtractAssetQuantity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelTransactionBuilder *arg1 = (shared_model::bindings::ModelTransactionBuilder *) 0 ;
  shared_model::interface::types::AssetIdType *arg2 = 0 ;
  std::string *arg3 = 0 ;
  shared_model::bindings::ModelTransactionBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelTransactionBuilder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  shared_model::interface::types::AssetIdType arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (arg1)->subtractAssetQuantity((shared_model::interface::types::AssetIdType const &)*arg2,(std::string const &)*arg3);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelTransactionBuilder **)&jresult = new shared_model::bindings::ModelTransactionBuilder((const shared_model::bindings::ModelTransactionBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelTransactionBuilder_1transferAsset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelTransactionBuilder *arg1 = (shared_model::bindings::ModelTransactionBuilder *) 0 ;
  shared_model::interface::types::AccountIdType *arg2 = 0 ;
  shared_model::interface::types::AccountIdType *arg3 = 0 ;
  shared_model::interface::types::AssetIdType *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  shared_model::bindings::ModelTransactionBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelTransactionBuilder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  shared_model::interface::types::AccountIdType arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  shared_model::interface::types::AccountIdType arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  shared_model::interface::types::AssetIdType arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr);
  arg6 = &arg6_str;
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  {
    try {
      result = (arg1)->transferAsset((shared_model::interface::types::AccountIdType const &)*arg2,(shared_model::interface::types::AccountIdType const &)*arg3,(shared_model::interface::types::AssetIdType const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelTransactionBuilder **)&jresult = new shared_model::bindings::ModelTransactionBuilder((const shared_model::bindings::ModelTransactionBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelTransactionBuilder_1build(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelTransactionBuilder *arg1 = (shared_model::bindings::ModelTransactionBuilder *) 0 ;
  SwigValueWrapper< shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelTransactionBuilder **)&jarg1; 
  {
    try {
      result = (arg1)->build();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > **)&jresult = new shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction >((const shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_delete_1ModelTransactionBuilder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shared_model::bindings::ModelTransactionBuilder *arg1 = (shared_model::bindings::ModelTransactionBuilder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shared_model::bindings::ModelTransactionBuilder **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1ModelQueryBuilder(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelQueryBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (shared_model::bindings::ModelQueryBuilder *)new shared_model::bindings::ModelQueryBuilder();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelQueryBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelQueryBuilder_1createdTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelQueryBuilder *arg1 = (shared_model::bindings::ModelQueryBuilder *) 0 ;
  shared_model::interface::types::TimestampType arg2 ;
  shared_model::bindings::ModelQueryBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelQueryBuilder **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (shared_model::interface::types::TimestampType)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (shared_model::interface::types::TimestampType)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    try {
      result = (arg1)->createdTime(arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelQueryBuilder **)&jresult = new shared_model::bindings::ModelQueryBuilder((const shared_model::bindings::ModelQueryBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelQueryBuilder_1creatorAccountId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelQueryBuilder *arg1 = (shared_model::bindings::ModelQueryBuilder *) 0 ;
  shared_model::interface::types::AccountIdType *arg2 = 0 ;
  shared_model::bindings::ModelQueryBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelQueryBuilder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  shared_model::interface::types::AccountIdType arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (arg1)->creatorAccountId((shared_model::interface::types::AccountIdType const &)*arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelQueryBuilder **)&jresult = new shared_model::bindings::ModelQueryBuilder((const shared_model::bindings::ModelQueryBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelQueryBuilder_1queryCounter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelQueryBuilder *arg1 = (shared_model::bindings::ModelQueryBuilder *) 0 ;
  shared_model::interface::types::CounterType arg2 ;
  shared_model::bindings::ModelQueryBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelQueryBuilder **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (shared_model::interface::types::CounterType)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (shared_model::interface::types::CounterType)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    try {
      result = (arg1)->queryCounter(arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelQueryBuilder **)&jresult = new shared_model::bindings::ModelQueryBuilder((const shared_model::bindings::ModelQueryBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelQueryBuilder_1getAccount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelQueryBuilder *arg1 = (shared_model::bindings::ModelQueryBuilder *) 0 ;
  shared_model::interface::types::AccountIdType *arg2 = 0 ;
  shared_model::bindings::ModelQueryBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelQueryBuilder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  shared_model::interface::types::AccountIdType arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (arg1)->getAccount((shared_model::interface::types::AccountIdType const &)*arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelQueryBuilder **)&jresult = new shared_model::bindings::ModelQueryBuilder((const shared_model::bindings::ModelQueryBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelQueryBuilder_1getSignatories(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelQueryBuilder *arg1 = (shared_model::bindings::ModelQueryBuilder *) 0 ;
  shared_model::interface::types::AccountIdType *arg2 = 0 ;
  shared_model::bindings::ModelQueryBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelQueryBuilder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  shared_model::interface::types::AccountIdType arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (arg1)->getSignatories((shared_model::interface::types::AccountIdType const &)*arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelQueryBuilder **)&jresult = new shared_model::bindings::ModelQueryBuilder((const shared_model::bindings::ModelQueryBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelQueryBuilder_1getAccountTransactions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelQueryBuilder *arg1 = (shared_model::bindings::ModelQueryBuilder *) 0 ;
  shared_model::interface::types::AccountIdType *arg2 = 0 ;
  shared_model::interface::types::TransactionsNumberType arg3 ;
  boost::optional< shared_model::interface::types::HashType > *arg4 = 0 ;
  shared_model::bindings::ModelQueryBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelQueryBuilder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  shared_model::interface::types::AccountIdType arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (shared_model::interface::types::TransactionsNumberType)jarg3; 
  arg4 = *(boost::optional< shared_model::interface::types::HashType > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::optional< shared_model::interface::types::HashType > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->getAccountTransactions((shared_model::interface::types::AccountIdType const &)*arg2,arg3,(boost::optional< shared_model::interface::types::HashType > const &)*arg4);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelQueryBuilder **)&jresult = new shared_model::bindings::ModelQueryBuilder((const shared_model::bindings::ModelQueryBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelQueryBuilder_1getAccountTransactions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelQueryBuilder *arg1 = (shared_model::bindings::ModelQueryBuilder *) 0 ;
  shared_model::interface::types::AccountIdType *arg2 = 0 ;
  shared_model::interface::types::TransactionsNumberType arg3 ;
  shared_model::bindings::ModelQueryBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelQueryBuilder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  shared_model::interface::types::AccountIdType arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (shared_model::interface::types::TransactionsNumberType)jarg3; 
  {
    try {
      result = (arg1)->getAccountTransactions((shared_model::interface::types::AccountIdType const &)*arg2,arg3);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelQueryBuilder **)&jresult = new shared_model::bindings::ModelQueryBuilder((const shared_model::bindings::ModelQueryBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelQueryBuilder_1getAccountAssetTransactions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelQueryBuilder *arg1 = (shared_model::bindings::ModelQueryBuilder *) 0 ;
  shared_model::interface::types::AccountIdType *arg2 = 0 ;
  shared_model::interface::types::AssetIdType *arg3 = 0 ;
  shared_model::interface::types::TransactionsNumberType arg4 ;
  boost::optional< shared_model::interface::types::HashType > *arg5 = 0 ;
  shared_model::bindings::ModelQueryBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelQueryBuilder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  shared_model::interface::types::AccountIdType arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  shared_model::interface::types::AssetIdType arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (shared_model::interface::types::TransactionsNumberType)jarg4; 
  arg5 = *(boost::optional< shared_model::interface::types::HashType > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::optional< shared_model::interface::types::HashType > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->getAccountAssetTransactions((shared_model::interface::types::AccountIdType const &)*arg2,(shared_model::interface::types::AssetIdType const &)*arg3,arg4,(boost::optional< shared_model::interface::types::HashType > const &)*arg5);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelQueryBuilder **)&jresult = new shared_model::bindings::ModelQueryBuilder((const shared_model::bindings::ModelQueryBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelQueryBuilder_1getAccountAssetTransactions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelQueryBuilder *arg1 = (shared_model::bindings::ModelQueryBuilder *) 0 ;
  shared_model::interface::types::AccountIdType *arg2 = 0 ;
  shared_model::interface::types::AssetIdType *arg3 = 0 ;
  shared_model::interface::types::TransactionsNumberType arg4 ;
  shared_model::bindings::ModelQueryBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelQueryBuilder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  shared_model::interface::types::AccountIdType arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  shared_model::interface::types::AssetIdType arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (shared_model::interface::types::TransactionsNumberType)jarg4; 
  {
    try {
      result = (arg1)->getAccountAssetTransactions((shared_model::interface::types::AccountIdType const &)*arg2,(shared_model::interface::types::AssetIdType const &)*arg3,arg4);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelQueryBuilder **)&jresult = new shared_model::bindings::ModelQueryBuilder((const shared_model::bindings::ModelQueryBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelQueryBuilder_1getAccountAssets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelQueryBuilder *arg1 = (shared_model::bindings::ModelQueryBuilder *) 0 ;
  shared_model::interface::types::AccountIdType *arg2 = 0 ;
  shared_model::bindings::ModelQueryBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelQueryBuilder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  shared_model::interface::types::AccountIdType arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (arg1)->getAccountAssets((shared_model::interface::types::AccountIdType const &)*arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelQueryBuilder **)&jresult = new shared_model::bindings::ModelQueryBuilder((const shared_model::bindings::ModelQueryBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelQueryBuilder_1getRoles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelQueryBuilder *arg1 = (shared_model::bindings::ModelQueryBuilder *) 0 ;
  shared_model::bindings::ModelQueryBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelQueryBuilder **)&jarg1; 
  {
    try {
      result = (arg1)->getRoles();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelQueryBuilder **)&jresult = new shared_model::bindings::ModelQueryBuilder((const shared_model::bindings::ModelQueryBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelQueryBuilder_1getAssetInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelQueryBuilder *arg1 = (shared_model::bindings::ModelQueryBuilder *) 0 ;
  shared_model::interface::types::AssetIdType *arg2 = 0 ;
  shared_model::bindings::ModelQueryBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelQueryBuilder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  shared_model::interface::types::AssetIdType arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (arg1)->getAssetInfo((shared_model::interface::types::AssetIdType const &)*arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelQueryBuilder **)&jresult = new shared_model::bindings::ModelQueryBuilder((const shared_model::bindings::ModelQueryBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelQueryBuilder_1getRolePermissions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelQueryBuilder *arg1 = (shared_model::bindings::ModelQueryBuilder *) 0 ;
  shared_model::interface::types::RoleIdType *arg2 = 0 ;
  shared_model::bindings::ModelQueryBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelQueryBuilder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  shared_model::interface::types::RoleIdType arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (arg1)->getRolePermissions((shared_model::interface::types::RoleIdType const &)*arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelQueryBuilder **)&jresult = new shared_model::bindings::ModelQueryBuilder((const shared_model::bindings::ModelQueryBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelQueryBuilder_1getTransactions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelQueryBuilder *arg1 = (shared_model::bindings::ModelQueryBuilder *) 0 ;
  std::vector< shared_model::crypto::Hash > *arg2 = 0 ;
  shared_model::bindings::ModelQueryBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(shared_model::bindings::ModelQueryBuilder **)&jarg1; 
  arg2 = *(std::vector< shared_model::crypto::Hash > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< shared_model::crypto::Hash > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->getTransactions((std::vector< shared_model::crypto::Hash > const &)*arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelQueryBuilder **)&jresult = new shared_model::bindings::ModelQueryBuilder((const shared_model::bindings::ModelQueryBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelQueryBuilder_1getAccountDetail_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelQueryBuilder *arg1 = (shared_model::bindings::ModelQueryBuilder *) 0 ;
  shared_model::interface::types::AccountIdType *arg2 = 0 ;
  shared_model::interface::types::AccountDetailKeyType *arg3 = 0 ;
  shared_model::interface::types::AccountIdType *arg4 = 0 ;
  shared_model::bindings::ModelQueryBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelQueryBuilder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  shared_model::interface::types::AccountIdType arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  shared_model::interface::types::AccountDetailKeyType arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  shared_model::interface::types::AccountIdType arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      result = (arg1)->getAccountDetail((shared_model::interface::types::AccountIdType const &)*arg2,(shared_model::interface::types::AccountDetailKeyType const &)*arg3,(shared_model::interface::types::AccountIdType const &)*arg4);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelQueryBuilder **)&jresult = new shared_model::bindings::ModelQueryBuilder((const shared_model::bindings::ModelQueryBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelQueryBuilder_1getAccountDetail_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelQueryBuilder *arg1 = (shared_model::bindings::ModelQueryBuilder *) 0 ;
  shared_model::interface::types::AccountIdType *arg2 = 0 ;
  shared_model::interface::types::AccountDetailKeyType *arg3 = 0 ;
  shared_model::bindings::ModelQueryBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelQueryBuilder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  shared_model::interface::types::AccountIdType arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  shared_model::interface::types::AccountDetailKeyType arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (arg1)->getAccountDetail((shared_model::interface::types::AccountIdType const &)*arg2,(shared_model::interface::types::AccountDetailKeyType const &)*arg3);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelQueryBuilder **)&jresult = new shared_model::bindings::ModelQueryBuilder((const shared_model::bindings::ModelQueryBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelQueryBuilder_1getAccountDetail_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelQueryBuilder *arg1 = (shared_model::bindings::ModelQueryBuilder *) 0 ;
  shared_model::interface::types::AccountIdType *arg2 = 0 ;
  shared_model::bindings::ModelQueryBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelQueryBuilder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  shared_model::interface::types::AccountIdType arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (arg1)->getAccountDetail((shared_model::interface::types::AccountIdType const &)*arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelQueryBuilder **)&jresult = new shared_model::bindings::ModelQueryBuilder((const shared_model::bindings::ModelQueryBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelQueryBuilder_1getAccountDetail_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelQueryBuilder *arg1 = (shared_model::bindings::ModelQueryBuilder *) 0 ;
  shared_model::bindings::ModelQueryBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelQueryBuilder **)&jarg1; 
  {
    try {
      result = (arg1)->getAccountDetail();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelQueryBuilder **)&jresult = new shared_model::bindings::ModelQueryBuilder((const shared_model::bindings::ModelQueryBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelQueryBuilder_1getPendingTransactions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelQueryBuilder *arg1 = (shared_model::bindings::ModelQueryBuilder *) 0 ;
  shared_model::bindings::ModelQueryBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelQueryBuilder **)&jarg1; 
  {
    try {
      result = (arg1)->getPendingTransactions();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelQueryBuilder **)&jresult = new shared_model::bindings::ModelQueryBuilder((const shared_model::bindings::ModelQueryBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelQueryBuilder_1build(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelQueryBuilder *arg1 = (shared_model::bindings::ModelQueryBuilder *) 0 ;
  SwigValueWrapper< shared_model::proto::UnsignedWrapper< shared_model::proto::Query > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelQueryBuilder **)&jarg1; 
  {
    try {
      result = (arg1)->build();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::proto::UnsignedWrapper< shared_model::proto::Query > **)&jresult = new shared_model::proto::UnsignedWrapper< shared_model::proto::Query >((const shared_model::proto::UnsignedWrapper< shared_model::proto::Query > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_delete_1ModelQueryBuilder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shared_model::bindings::ModelQueryBuilder *arg1 = (shared_model::bindings::ModelQueryBuilder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shared_model::bindings::ModelQueryBuilder **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1ModelBlocksQueryBuilder(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelBlocksQueryBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (shared_model::bindings::ModelBlocksQueryBuilder *)new shared_model::bindings::ModelBlocksQueryBuilder();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelBlocksQueryBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelBlocksQueryBuilder_1createdTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelBlocksQueryBuilder *arg1 = (shared_model::bindings::ModelBlocksQueryBuilder *) 0 ;
  shared_model::interface::types::TimestampType arg2 ;
  shared_model::bindings::ModelBlocksQueryBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelBlocksQueryBuilder **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (shared_model::interface::types::TimestampType)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (shared_model::interface::types::TimestampType)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    try {
      result = (arg1)->createdTime(arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelBlocksQueryBuilder **)&jresult = new shared_model::bindings::ModelBlocksQueryBuilder((const shared_model::bindings::ModelBlocksQueryBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelBlocksQueryBuilder_1creatorAccountId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelBlocksQueryBuilder *arg1 = (shared_model::bindings::ModelBlocksQueryBuilder *) 0 ;
  shared_model::interface::types::AccountIdType *arg2 = 0 ;
  shared_model::bindings::ModelBlocksQueryBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelBlocksQueryBuilder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  shared_model::interface::types::AccountIdType arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (arg1)->creatorAccountId((shared_model::interface::types::AccountIdType const &)*arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelBlocksQueryBuilder **)&jresult = new shared_model::bindings::ModelBlocksQueryBuilder((const shared_model::bindings::ModelBlocksQueryBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelBlocksQueryBuilder_1queryCounter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelBlocksQueryBuilder *arg1 = (shared_model::bindings::ModelBlocksQueryBuilder *) 0 ;
  shared_model::interface::types::CounterType arg2 ;
  shared_model::bindings::ModelBlocksQueryBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelBlocksQueryBuilder **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (shared_model::interface::types::CounterType)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (shared_model::interface::types::CounterType)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    try {
      result = (arg1)->queryCounter(arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelBlocksQueryBuilder **)&jresult = new shared_model::bindings::ModelBlocksQueryBuilder((const shared_model::bindings::ModelBlocksQueryBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelBlocksQueryBuilder_1build(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelBlocksQueryBuilder *arg1 = (shared_model::bindings::ModelBlocksQueryBuilder *) 0 ;
  SwigValueWrapper< shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelBlocksQueryBuilder **)&jarg1; 
  {
    try {
      result = (arg1)->build();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > **)&jresult = new shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery >((const shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_delete_1ModelBlocksQueryBuilder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shared_model::bindings::ModelBlocksQueryBuilder *arg1 = (shared_model::bindings::ModelBlocksQueryBuilder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shared_model::bindings::ModelBlocksQueryBuilder **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelCrypto_1generateKeypair(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelCrypto *arg1 = (shared_model::bindings::ModelCrypto *) 0 ;
  SwigValueWrapper< shared_model::crypto::Keypair > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelCrypto **)&jarg1; 
  {
    try {
      result = (arg1)->generateKeypair();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::crypto::Keypair **)&jresult = new shared_model::crypto::Keypair((const shared_model::crypto::Keypair &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelCrypto_1fromPrivateKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelCrypto *arg1 = (shared_model::bindings::ModelCrypto *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< shared_model::crypto::Keypair > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelCrypto **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (arg1)->fromPrivateKey((std::string const &)*arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::crypto::Keypair **)&jresult = new shared_model::crypto::Keypair((const shared_model::crypto::Keypair &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelCrypto_1convertFromExisting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelCrypto *arg1 = (shared_model::bindings::ModelCrypto *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  SwigValueWrapper< shared_model::crypto::Keypair > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelCrypto **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (arg1)->convertFromExisting((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::crypto::Keypair **)&jresult = new shared_model::crypto::Keypair((const shared_model::crypto::Keypair &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1ModelCrypto(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelCrypto *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (shared_model::bindings::ModelCrypto *)new shared_model::bindings::ModelCrypto();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelCrypto **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_delete_1ModelCrypto(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shared_model::bindings::ModelCrypto *arg1 = (shared_model::bindings::ModelCrypto *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shared_model::bindings::ModelCrypto **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_validateTransaction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  shared_model::bindings::Blob *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::Blob **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::bindings::Blob const & reference is null");
    return ;
  } 
  {
    try {
      shared_model::bindings::validateTransaction((std::vector< unsigned char > const &)*arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_validateQuery(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  shared_model::bindings::Blob *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::Blob **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::bindings::Blob const & reference is null");
    return ;
  } 
  {
    try {
      shared_model::bindings::validateQuery((std::vector< unsigned char > const &)*arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_signTransaction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  shared_model::bindings::Blob *arg1 = 0 ;
  shared_model::crypto::Keypair *arg2 = 0 ;
  shared_model::bindings::Blob result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(shared_model::bindings::Blob **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::bindings::Blob const & reference is null");
    return 0;
  } 
  arg2 = *(shared_model::crypto::Keypair **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::crypto::Keypair const & reference is null");
    return 0;
  } 
  {
    try {
      result = shared_model::bindings::signTransaction((std::vector< unsigned char > const &)*arg1,(shared_model::crypto::Keypair const &)*arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::Blob **)&jresult = new shared_model::bindings::Blob((const shared_model::bindings::Blob &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_signQuery(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  shared_model::bindings::Blob *arg1 = 0 ;
  shared_model::crypto::Keypair *arg2 = 0 ;
  shared_model::bindings::Blob result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(shared_model::bindings::Blob **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::bindings::Blob const & reference is null");
    return 0;
  } 
  arg2 = *(shared_model::crypto::Keypair **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::crypto::Keypair const & reference is null");
    return 0;
  } 
  {
    try {
      result = shared_model::bindings::signQuery((std::vector< unsigned char > const &)*arg1,(shared_model::crypto::Keypair const &)*arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::Blob **)&jresult = new shared_model::bindings::Blob((const shared_model::bindings::Blob &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_hashTransaction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::bindings::Blob *arg1 = 0 ;
  shared_model::bindings::Blob result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::Blob **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::bindings::Blob const & reference is null");
    return 0;
  } 
  {
    try {
      result = shared_model::bindings::hashTransaction((std::vector< unsigned char > const &)*arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::Blob **)&jresult = new shared_model::bindings::Blob((const shared_model::bindings::Blob &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_hashQuery(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::bindings::Blob *arg1 = 0 ;
  shared_model::bindings::Blob result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::Blob **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::bindings::Blob const & reference is null");
    return 0;
  } 
  {
    try {
      result = shared_model::bindings::hashQuery((std::vector< unsigned char > const &)*arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::Blob **)&jresult = new shared_model::bindings::Blob((const shared_model::bindings::Blob &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_utxReducedHash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > *arg1 = 0 ;
  shared_model::interface::types::HashType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > const & reference is null");
    return 0;
  } 
  {
    try {
      result = shared_model::bindings::utxReducedHash((shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > const &)*arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::interface::types::HashType **)&jresult = new shared_model::interface::types::HashType((const shared_model::interface::types::HashType &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1UnsignedTx_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::proto::Transaction *arg1 = 0 ;
  shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::Transaction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::proto::Transaction const & reference is null");
    return 0;
  } 
  {
    try {
      result = (shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > *)new shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction >((shared_model::proto::Transaction const &)*arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1UnsignedTx_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > *arg1 = 0 ;
  shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > && reference is null");
    return 0;
  } 
  {
    try {
      result = (shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > *)new shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction >((shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > &&)*arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_UnsignedTx_1signAndAddSignature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > *arg1 = (shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > *) 0 ;
  shared_model::crypto::Keypair *arg2 = 0 ;
  shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > **)&jarg1; 
  arg2 = *(shared_model::crypto::Keypair **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::crypto::Keypair const & reference is null");
    return 0;
  } 
  {
    try {
      result = (shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > *) &(arg1)->signAndAddSignature((shared_model::crypto::Keypair const &)*arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_UnsignedTx_1finish(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > *arg1 = (shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > *) 0 ;
  SwigValueWrapper< shared_model::proto::Transaction > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > **)&jarg1; 
  {
    try {
      result = (arg1)->finish();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::proto::Transaction **)&jresult = new shared_model::proto::Transaction((const shared_model::proto::Transaction &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_UnsignedTx_1hash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > *arg1 = (shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > *) 0 ;
  shared_model::interface::types::HashType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > **)&jarg1; 
  {
    try {
      result = (arg1)->hash();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::interface::types::HashType **)&jresult = new shared_model::interface::types::HashType((const shared_model::interface::types::HashType &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_delete_1UnsignedTx(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > *arg1 = (shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1UnsignedQuery_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::proto::Query *arg1 = 0 ;
  shared_model::proto::UnsignedWrapper< shared_model::proto::Query > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::Query **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::proto::Query const & reference is null");
    return 0;
  } 
  {
    try {
      result = (shared_model::proto::UnsignedWrapper< shared_model::proto::Query > *)new shared_model::proto::UnsignedWrapper< shared_model::proto::Query >((shared_model::proto::Query const &)*arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::proto::UnsignedWrapper< shared_model::proto::Query > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1UnsignedQuery_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::proto::UnsignedWrapper< shared_model::proto::Query > *arg1 = 0 ;
  shared_model::proto::UnsignedWrapper< shared_model::proto::Query > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::UnsignedWrapper< shared_model::proto::Query > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::proto::UnsignedWrapper< shared_model::proto::Query > && reference is null");
    return 0;
  } 
  {
    try {
      result = (shared_model::proto::UnsignedWrapper< shared_model::proto::Query > *)new shared_model::proto::UnsignedWrapper< shared_model::proto::Query >((shared_model::proto::UnsignedWrapper< shared_model::proto::Query > &&)*arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::proto::UnsignedWrapper< shared_model::proto::Query > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_UnsignedQuery_1signAndAddSignature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  shared_model::proto::UnsignedWrapper< shared_model::proto::Query > *arg1 = (shared_model::proto::UnsignedWrapper< shared_model::proto::Query > *) 0 ;
  shared_model::crypto::Keypair *arg2 = 0 ;
  shared_model::proto::UnsignedWrapper< shared_model::proto::Query > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(shared_model::proto::UnsignedWrapper< shared_model::proto::Query > **)&jarg1; 
  arg2 = *(shared_model::crypto::Keypair **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::crypto::Keypair const & reference is null");
    return 0;
  } 
  {
    try {
      result = (shared_model::proto::UnsignedWrapper< shared_model::proto::Query > *) &(arg1)->signAndAddSignature((shared_model::crypto::Keypair const &)*arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::proto::UnsignedWrapper< shared_model::proto::Query > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_UnsignedQuery_1finish(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::proto::UnsignedWrapper< shared_model::proto::Query > *arg1 = (shared_model::proto::UnsignedWrapper< shared_model::proto::Query > *) 0 ;
  SwigValueWrapper< shared_model::proto::Query > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::UnsignedWrapper< shared_model::proto::Query > **)&jarg1; 
  {
    try {
      result = (arg1)->finish();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::proto::Query **)&jresult = new shared_model::proto::Query((const shared_model::proto::Query &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_UnsignedQuery_1hash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::proto::UnsignedWrapper< shared_model::proto::Query > *arg1 = (shared_model::proto::UnsignedWrapper< shared_model::proto::Query > *) 0 ;
  shared_model::interface::types::HashType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::UnsignedWrapper< shared_model::proto::Query > **)&jarg1; 
  {
    try {
      result = (arg1)->hash();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::interface::types::HashType **)&jresult = new shared_model::interface::types::HashType((const shared_model::interface::types::HashType &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_delete_1UnsignedQuery(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shared_model::proto::UnsignedWrapper< shared_model::proto::Query > *arg1 = (shared_model::proto::UnsignedWrapper< shared_model::proto::Query > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shared_model::proto::UnsignedWrapper< shared_model::proto::Query > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1UnsignedBlockQuery_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::proto::BlocksQuery *arg1 = 0 ;
  shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::BlocksQuery **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::proto::BlocksQuery const & reference is null");
    return 0;
  } 
  {
    try {
      result = (shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > *)new shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery >((shared_model::proto::BlocksQuery const &)*arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1UnsignedBlockQuery_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > *arg1 = 0 ;
  shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > && reference is null");
    return 0;
  } 
  {
    try {
      result = (shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > *)new shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery >((shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > &&)*arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_UnsignedBlockQuery_1signAndAddSignature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > *arg1 = (shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > *) 0 ;
  shared_model::crypto::Keypair *arg2 = 0 ;
  shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > **)&jarg1; 
  arg2 = *(shared_model::crypto::Keypair **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::crypto::Keypair const & reference is null");
    return 0;
  } 
  {
    try {
      result = (shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > *) &(arg1)->signAndAddSignature((shared_model::crypto::Keypair const &)*arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_UnsignedBlockQuery_1finish(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > *arg1 = (shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > *) 0 ;
  SwigValueWrapper< shared_model::proto::BlocksQuery > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > **)&jarg1; 
  {
    try {
      result = (arg1)->finish();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::proto::BlocksQuery **)&jresult = new shared_model::proto::BlocksQuery((const shared_model::proto::BlocksQuery &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_UnsignedBlockQuery_1hash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > *arg1 = (shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > *) 0 ;
  shared_model::interface::types::HashType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > **)&jarg1; 
  {
    try {
      result = (arg1)->hash();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::interface::types::HashType **)&jresult = new shared_model::interface::types::HashType((const shared_model::interface::types::HashType &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_delete_1UnsignedBlockQuery(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > *arg1 = (shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1ModelProtoTransaction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > *arg1 = 0 ;
  shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > & reference is null");
    return 0;
  } 
  {
    try {
      result = (shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > > *)new shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > >(*arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelProtoTransaction_1signAndAddSignature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > > *arg1 = (shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > > *) 0 ;
  shared_model::crypto::Keypair *arg2 = 0 ;
  SwigValueWrapper< shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > > **)&jarg1; 
  arg2 = *(shared_model::crypto::Keypair **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::crypto::Keypair const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->signAndAddSignature((shared_model::crypto::Keypair const &)*arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > > **)&jresult = new shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > >((const shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelProtoTransaction_1finish(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > > *arg1 = (shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > > *) 0 ;
  shared_model::crypto::Blob result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > > **)&jarg1; 
  {
    try {
      result = (arg1)->finish();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::crypto::Blob **)&jresult = new shared_model::crypto::Blob((const shared_model::crypto::Blob &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_delete_1ModelProtoTransaction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > > *arg1 = (shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::Transaction > > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1ModelProtoQuery(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::proto::UnsignedWrapper< shared_model::proto::Query > *arg1 = 0 ;
  shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::Query > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::UnsignedWrapper< shared_model::proto::Query > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::proto::UnsignedWrapper< shared_model::proto::Query > & reference is null");
    return 0;
  } 
  {
    try {
      result = (shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::Query > > *)new shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::Query > >(*arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::Query > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelProtoQuery_1signAndAddSignature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::Query > > *arg1 = (shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::Query > > *) 0 ;
  shared_model::crypto::Keypair *arg2 = 0 ;
  SwigValueWrapper< shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::Query > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::Query > > **)&jarg1; 
  arg2 = *(shared_model::crypto::Keypair **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::crypto::Keypair const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->signAndAddSignature((shared_model::crypto::Keypair const &)*arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::Query > > **)&jresult = new shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::Query > >((const shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::Query > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelProtoQuery_1finish(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::Query > > *arg1 = (shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::Query > > *) 0 ;
  shared_model::crypto::Blob result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::Query > > **)&jarg1; 
  {
    try {
      result = (arg1)->finish();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::crypto::Blob **)&jresult = new shared_model::crypto::Blob((const shared_model::crypto::Blob &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_delete_1ModelProtoQuery(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::Query > > *arg1 = (shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::Query > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::Query > > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1ModelProtoBlocksQuery(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > *arg1 = 0 ;
  shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > & reference is null");
    return 0;
  } 
  {
    try {
      result = (shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > > *)new shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > >(*arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelProtoBlocksQuery_1signAndAddSignature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > > *arg1 = (shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > > *) 0 ;
  shared_model::crypto::Keypair *arg2 = 0 ;
  SwigValueWrapper< shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > > **)&jarg1; 
  arg2 = *(shared_model::crypto::Keypair **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::crypto::Keypair const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->signAndAddSignature((shared_model::crypto::Keypair const &)*arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > > **)&jresult = new shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > >((const shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_ModelProtoBlocksQuery_1finish(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > > *arg1 = (shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > > *) 0 ;
  shared_model::crypto::Blob result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > > **)&jarg1; 
  {
    try {
      result = (arg1)->finish();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::crypto::Blob **)&jresult = new shared_model::crypto::Blob((const shared_model::crypto::Blob &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_delete_1ModelProtoBlocksQuery(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > > *arg1 = (shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shared_model::bindings::ModelProto< shared_model::proto::UnsignedWrapper< shared_model::proto::BlocksQuery > > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1RolePermissionSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *)new shared_model::interface::PermissionSet< shared_model::interface::permissions::Role >();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1RolePermissionSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *)new shared_model::interface::PermissionSet< shared_model::interface::permissions::Role >((std::string const &)*arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_RolePermissionSet_1toBitstring(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *arg1 = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > **)&jarg1; 
  {
    try {
      result = ((shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > const *)arg1)->toBitstring();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_RolePermissionSet_1size(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = shared_model::interface::PermissionSet< shared_model::interface::permissions::Role >::SWIGTEMPLATEDISAMBIGUATOR size();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_RolePermissionSet_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *arg1 = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *) 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > **)&jarg1; 
  {
    try {
      result = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *) &(arg1)->reset();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_RolePermissionSet_1set_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *arg1 = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *) 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > **)&jarg1; 
  {
    try {
      result = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *) &(arg1)->set();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_RolePermissionSet_1set_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *arg1 = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *) 0 ;
  shared_model::interface::permissions::Role arg2 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > **)&jarg1; 
  arg2 = (shared_model::interface::permissions::Role)jarg2; 
  {
    try {
      result = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *) &(arg1)->set(arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_RolePermissionSet_1unset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *arg1 = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *) 0 ;
  shared_model::interface::permissions::Role arg2 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > **)&jarg1; 
  arg2 = (shared_model::interface::permissions::Role)jarg2; 
  {
    try {
      result = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *) &(arg1)->unset(arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_RolePermissionSet_1test(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *arg1 = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *) 0 ;
  shared_model::interface::permissions::Role arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > **)&jarg1; 
  arg2 = (shared_model::interface::permissions::Role)jarg2; 
  {
    try {
      result = (bool)((shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > const *)arg1)->test(arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_RolePermissionSet_1none(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *arg1 = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > **)&jarg1; 
  {
    try {
      result = (bool)((shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > const *)arg1)->none();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_RolePermissionSet_1isSubsetOf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *arg1 = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *) 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > **)&jarg1; 
  arg2 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > const *)arg1)->isSubsetOf((shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > const &)*arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_RolePermissionSet_1equal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *arg1 = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *) 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > **)&jarg1; 
  arg2 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > const *)arg1)->operator ==((shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > const &)*arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_RolePermissionSet_1not_1equal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *arg1 = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *) 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > **)&jarg1; 
  arg2 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > const *)arg1)->operator !=((shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > const &)*arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_RolePermissionSet_1bset_1and(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *arg1 = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *) 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *arg2 = 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > **)&jarg1; 
  arg2 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *) &(arg1)->operator &=((shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > const &)*arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_RolePermissionSet_1bset_1or(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *arg1 = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *) 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *arg2 = 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > **)&jarg1; 
  arg2 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *) &(arg1)->operator |=((shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > const &)*arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_RolePermissionSet_1bset_1xor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *arg1 = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *) 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *arg2 = 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > **)&jarg1; 
  arg2 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *) &(arg1)->operator ^=((shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > const &)*arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_RolePermissionSet_1iterate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *arg1 = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *) 0 ;
  std::function< void (shared_model::interface::permissions::Role) > arg2 ;
  std::function< void (shared_model::interface::permissions::Role) > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > **)&jarg1; 
  argp2 = *(std::function< void (shared_model::interface::permissions::Role) > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::function< void (shared_model::interface::permissions::Role) >");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      ((shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > const *)arg1)->iterate(arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1RolePermissionSet_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *)new_shared_model_interface_PermissionSet_Sl_shared_model_interface_permissions_Role_Sg___SWIG_2((std::vector< int > const &)*arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_delete_1RolePermissionSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *arg1 = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Role > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1GrantablePermissionSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *)new shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable >();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1GrantablePermissionSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *)new shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable >((std::string const &)*arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_GrantablePermissionSet_1toBitstring(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *arg1 = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > **)&jarg1; 
  {
    try {
      result = ((shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > const *)arg1)->toBitstring();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_GrantablePermissionSet_1size(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable >::SWIGTEMPLATEDISAMBIGUATOR size();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_GrantablePermissionSet_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *arg1 = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *) 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > **)&jarg1; 
  {
    try {
      result = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *) &(arg1)->reset();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_GrantablePermissionSet_1set_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *arg1 = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *) 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > **)&jarg1; 
  {
    try {
      result = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *) &(arg1)->set();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_GrantablePermissionSet_1set_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *arg1 = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *) 0 ;
  shared_model::interface::permissions::Grantable arg2 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > **)&jarg1; 
  arg2 = (shared_model::interface::permissions::Grantable)jarg2; 
  {
    try {
      result = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *) &(arg1)->set(arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_GrantablePermissionSet_1unset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *arg1 = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *) 0 ;
  shared_model::interface::permissions::Grantable arg2 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > **)&jarg1; 
  arg2 = (shared_model::interface::permissions::Grantable)jarg2; 
  {
    try {
      result = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *) &(arg1)->unset(arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_GrantablePermissionSet_1test(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *arg1 = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *) 0 ;
  shared_model::interface::permissions::Grantable arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > **)&jarg1; 
  arg2 = (shared_model::interface::permissions::Grantable)jarg2; 
  {
    try {
      result = (bool)((shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > const *)arg1)->test(arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_GrantablePermissionSet_1none(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *arg1 = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > **)&jarg1; 
  {
    try {
      result = (bool)((shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > const *)arg1)->none();
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_GrantablePermissionSet_1isSubsetOf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *arg1 = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *) 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > **)&jarg1; 
  arg2 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > const *)arg1)->isSubsetOf((shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > const &)*arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_GrantablePermissionSet_1equal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *arg1 = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *) 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > **)&jarg1; 
  arg2 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > const *)arg1)->operator ==((shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > const &)*arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_GrantablePermissionSet_1not_1equal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *arg1 = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *) 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > **)&jarg1; 
  arg2 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > const *)arg1)->operator !=((shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > const &)*arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_GrantablePermissionSet_1bset_1and(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *arg1 = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *) 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *arg2 = 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > **)&jarg1; 
  arg2 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *) &(arg1)->operator &=((shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > const &)*arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_GrantablePermissionSet_1bset_1or(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *arg1 = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *) 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *arg2 = 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > **)&jarg1; 
  arg2 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *) &(arg1)->operator |=((shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > const &)*arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_GrantablePermissionSet_1bset_1xor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *arg1 = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *) 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *arg2 = 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > **)&jarg1; 
  arg2 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *) &(arg1)->operator ^=((shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > const &)*arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_GrantablePermissionSet_1iterate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *arg1 = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *) 0 ;
  std::function< void (shared_model::interface::permissions::Grantable) > arg2 ;
  std::function< void (shared_model::interface::permissions::Grantable) > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > **)&jarg1; 
  argp2 = *(std::function< void (shared_model::interface::permissions::Grantable) > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::function< void (shared_model::interface::permissions::Grantable) >");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      ((shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > const *)arg1)->iterate(arg2);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_new_1GrantablePermissionSet_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = 0 ;
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *)new_shared_model_interface_PermissionSet_Sl_shared_model_interface_permissions_Grantable_Sg___SWIG_2((std::vector< int > const &)*arg1);
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return 0; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return 0; 
      };
    }
  }
  *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_delete_1GrantablePermissionSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *arg1 = (shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shared_model::interface::PermissionSet< shared_model::interface::permissions::Grantable > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::invalid_argument &e) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, e.what()); return ; 
      };
    } catch (const std::out_of_range &e) {
      {
        SWIG_JavaException(jenv, SWIG_OverflowError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_PublicKey_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(shared_model::crypto::Blob **)&baseptr = *(shared_model::crypto::PublicKey **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_PrivateKey_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(shared_model::crypto::Blob **)&baseptr = *(shared_model::crypto::PrivateKey **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Hash_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(shared_model::crypto::Blob **)&baseptr = *(shared_model::crypto::Hash **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_jp_co_soramitsu_iroha_irohaJNI_Signed_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(shared_model::crypto::Blob **)&baseptr = *(shared_model::crypto::Signed **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

